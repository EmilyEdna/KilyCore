
@{
    ViewData["Title"] = "事件分布图";
    Layout = "~/Views/Shared/BaseView.cshtml";
}
@section css{
    <style>
        .ibox {
            width: 100%;
            height: 100%;
            border: #ccc solid 1px;
            margin: auto auto;
        }

        label {
            max-width: 80px;
        }
    </style>
}
@section script{
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=3ce7ddfda60046708248ea55e10b1435"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js"></script>
    <script>

        //提示：下面的代码用jquery，所以如果有不能运行的情况请引用后尝试
        //百度地图api container对应前端div名称 前端要引用2.0版本的百度地图api
        //需引用api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js

        var blist = [];
        var districtLoading = 0;



        /**
         * 添加行政区划
         *  districtName 行政区划名
         * returns  无返回值
         */
        function addDistrict(districtName, map) {
            //使用计数器来控制加载过程
            districtLoading++;
            var bdary = new BMap.Boundary();
            bdary.get(districtName, function (rs) {       //获取行政区域
                var count = rs.boundaries.length; //行政区域的点有多少个
                if (count === 0) {
                    alert('未能获取当前输入行政区域');
                    return;
                }
                for (var i = 0; i < count; i++) {
                    blist.push({ points: rs.boundaries[i], name: districtName });
                };
                //加载完成区域点后计数器-1
                districtLoading--;
                if (districtLoading == 0) {
                    //全加载完成后画端点
                    drawBoundary(map);
                }
            });
        }


        /**
         * 各种鼠标事件绑定
         */
        function click(evt) {
            alert(evt.target.name);
        }

        function mouseover(evt) {
            evt.target.label.setZIndex(99);
            evt.target.label.setPosition(evt.point);
            evt.target.label.show();
        }

        function mousemove(evt) {
            evt.target.label.setPosition(evt.point);
        }

        function mouseout(evt) {
            evt.target.label.hide();
        }

        function drawBoundary(map) {
            //包含所有区域的点数组
            var pointArray = [];

            /*画遮蔽层的相关方法
            *思路: 首先在中国地图最外画一圈，圈住理论上所有的中国领土，然后再将每个闭合区域合并进来，并全部连到西北角。
            *      这样就做出了一个经过多次西北角的闭合多边形*/
            //定义中国东南西北端点，作为第一层
            var pNW = { lat: 59.0, lng: 73.0 }
            var pNE = { lat: 59.0, lng: 136.0 }
            var pSE = { lat: 3.0, lng: 136.0 }
            var pSW = { lat: 3.0, lng: 73.0 }
            //向数组中添加一次闭合多边形，并将西北角再加一次作为之后画闭合区域的起点
            var pArray = [];
            pArray.push(pNW);
            pArray.push(pSW);
            pArray.push(pSE);
            pArray.push(pNE);
            pArray.push(pNW);
            //循环添加各闭合区域
            for (var i = 0; i < blist.length; i++) {
                //添加显示用标签层
                var label = new BMap.Label(blist[i].name, { offset: new BMap.Size(20, -10) });
                label.hide();
                map.addOverlay(label);

                //添加多边形层并显示
                var ply = new BMap.Polygon(blist[i].points, { strokeWeight:2, strokeColor: "#FF0000", fillOpacity: 0.01, fillColor: " #FFFFFF" }); //建立多边形覆盖物
                ply.name = blist[i].name;
                ply.label = label;
                ply.addEventListener("click", click);
                ply.addEventListener("mouseover", mouseover);
                ply.addEventListener("mouseout", mouseout);
                ply.addEventListener("mousemove", mousemove);
                map.addOverlay(ply);

                //添加名称标签层
                //var centerlabel = new BMap.Label(blist[i].name, { offset: new BMap.Size(0, 0) });
                //centerlabel.setPosition(ply.getBounds().getCenter());
                //map.addOverlay(centerlabel);

                //将点增加到视野范围内
                var path = ply.getPath();
                pointArray = pointArray.concat(path);
                //将闭合区域加到遮蔽层上，每次添加完后要再加一次西北角作为下次添加的起点和最后一次的终点
                pArray = pArray.concat(path);
                pArray.push(pArray[0]);
            }

            //限定显示区域，需要引用api库
            var boundply = new BMap.Polygon(pointArray);
            BMapLib.AreaRestriction.setBounds(map, boundply.getBounds());
            map.setViewport(pointArray);    //调整视野

            //添加遮蔽层
            var plyall = new BMap.Polygon(pArray, { strokeOpacity: 0.0000001, strokeColor: "#000000", strokeWeight: 0.00001, fillColor: "#000000", fillOpacity: 0.4 }); //建立多边形覆盖物
            map.addOverlay(plyall);
        }
        //配置
        var options = {
            Init: function () {
                this.InitDom();
                this.InitEvents();
            },
            //元素
            InitDom: function () {
                options.Name = null;
                controller.ajax({
                    url: "GovtWeb/GetCity",
                    data: { Id: GovtInfo.City },
                    async: false,
                    type: "post",
                    success: function (result) {
                        options.Name = result.data;

                    }
                });
                $.ajax({
                    url: "http://api.map.baidu.com/geocoder/v2/?address=" + options.Name + "&output=json&ak=3ce7ddfda60046708248ea55e10b1435",
                    type: "get",
                    async: false,
                    dataType: "jsonp",
                    success: function (result) {
                        options.marker = new BMap.Marker(new BMap.Point(result.result.location.lng, result.result.location.lat));
                        options.Map.addOverlay(options.marker);               // 将标注添加到地图中
                        controller.ajax({
                            url: "GovtWeb/GetRiskCount",
                            data: {},
                            async: false,
                            type: "post",
                            success: function (result) {
                                var label = new BMap.Label(options.Name + "(" + result.data + "条)", { offset: new BMap.Size(20, -15) });
                                label.setStyle({
                                    width: "80px",
                                    background: '#ff8355',
                                    border: '1px solid "#ff8355"',
                                    borderRadius: "5px",
                                    textAlign: "center",
                                    height: "26px",
                                    lineHeight: "26px"
                                });
                                options.marker.setLabel(label);
                            }
                        });
                    }
                });
                options.Map = new BMap.Map("Map", { enableMapClick: false });//在百度地图容器中创建一个地图
                options.Map.centerAndZoom(options.Name, 10);//设定地图的中心点和坐标并将地图显示在地图容器中
                options.Map.enableScrollWheelZoom();//启用地图滚轮放大缩小
                //设置样式
                options.Map.setMapStyle({
                    styleJson: [
                        {//不显示点信息
                            "featureType": "poi",
                            "elementType": "all",
                            "stylers": {
                                "color": "#ffffff",
                                "visibility": "off"
                            }
                        }
                    ]
                });
                addDistrict(options.Name, options.Map);
            },
            //事件
            InitEvents: function () {
                $(".BMapLabel").css("width", "20px");
            }
        };
        //初始化
        $(document).ready(function () {
            options.Init();
        });
    </script>
}
<div class="ibox" id="Map"></div>